📌컨텍스트로 데이터 관리하기
: 컨텍스트를 사용하면 여러 곳에 흩어진 데이터를 한곳에 모아 체게적으로 관리할 수 있고, 컴포넌트의 데이터를 효율적으로 수집하거나 공유할 수 있다.
(컨텍스트 개념은 이후 리덕스에서도 그대로 적용된다.)

💡프로퍼티와 state는 부모와 자식 컴포넌트가 연결된 상태에서 공유하는 데이터였다. 
(반면 컨텍스트는 부모와 자식 컴포넌트가 연결되어 있지 않아도 데이터를 공유할 수 있게 해준다.)
[ 컨텍스트는 보통 '데이터 공유 저장소'와 '데이터 전파'를 담당한다..]

💡관찰자 패턴이란? 
데이터는 공급자가 관리하고 관찰자는 공급자를 구독하여 데이터를 얻는 방식이다.

"공급자와 소비자의 관계 
1. 소비자는 공급자보다 낮은 계층에 있어야 한다.
2. 소비자는 공급자가 제공하는 콜백 함수로 데이터를 변경할 수 있다.
(Data Down, Action Up(데이터는 아래로, 변경 요청은 위로)로 데이터가 흐른다.) : 단반향 데이터 흐름은 변경된 데이터의 일관성을 유지하는데 매우 효과적이다.


"실무에서는 하나읫 소비자가 두 개이상의 공급자 데이터를 함꼐 참조하는 경우도 많다.:
(여기에서는 소비자가 여러 개의 데이터를 구독하는 다양한 방법이 있다. 상이한 공급자 데이터가 같은 이름을 가졌을 때 이로 인한 충돌을 방지하는 방법이다.)



커링으로 중복 공급자 문제 해결하기
- 앞에서 소개한 문제점을 해결하는 방법은 '커링을 도입하는 것'이다. 
(키 이름을 인자로 받아 원하는 공급자의 컨텍스트 데이터를 반환하는 커링 함수를 만들면 된다.)




📌컨텍스트 API 사용하기
: 컨텍스트 API를 사용하면 공급자와 소비자 를 구현하지 않아도 된다.

🪛 createContext()
: 리액트에서 제공하는 createContext를 사용하면 컨텍스트를 생성할 수 있다.

