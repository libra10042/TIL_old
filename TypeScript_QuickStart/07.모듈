📌 모듈
: 프로그램은 여러 모듈로 구성돼 있고 모듈을 결합해 하나의 프로그램을 만든다. 
모듈의 장점
1) 유지보수의 용이성
2) 전역 스코프 오염을 방지 
3) 재사용성 향상


- 중복 코드는 유지보수를 여럽게 한다. 자주 사용하는 공통 기능을 모듈로 정의해 사용하면 애플리케이션의 전체적인 수정 없이 모듈의 
수정이나 교체만으로도 코드를 효과적으로 수정할 수 있다. 
- 변수나 함수 등을 파일 내부에 한정해 모듈로 선언하면 이름 공간이 파일 단위로 제한되며 전역 이름 공간을 침범하지 않는다.
- 모듈화를 잘 해 두면 현재의 프로젝트뿐 아니라 다른 프로젝트에서도 공유해 재사용할 수 있다.


        💡 네임 스페이스란
        하나의 독립된 이름 공간을 만들고 여러 파일에 걸쳐 하나의 이름 공간을 공유할 수 있다. 



👏내부 모듈과 외부 모듈
- 타입 스크립트를 모듈을 잘 이해하려면 내부 모듈과 외부 모듈로 구분해야 한다. 
1) 내부 모듈 
: 파일이 다르더라도 프로젝트 내에서 같은 네임스페이스 내에서는 이름을 중복해 클래스, 함수, 변수 등을 선언하면 안된다.
( 네임스페이스가 다르면 이름 충돌이 발생하지 않는다. 이러한 이유로 네임스페이스는 프로젝트와 분리해 라이브러리 단위의 모듈을 구성할 때 사용하면 좋다.)

2) 외부 모듈
main.ts 파일을 commonjs 모듈 형식으로 컴파일하려면 명령어를 다음과 같이 입력. 
$ tsc --module commonjs main.js



"namespace와 moulde은 동작과 기능상의 차이가 없고 심지어 컴파일 결과도 차이가 없다."

1. 한파일에 여러네임스페이스 선언하기. 
- 네임스페이스는 보통 여러 파일에 걸쳐 하나의 이름을 공유하는데 특정파일에만 네임스페이스를 선언하거나 특정 파일에 여러 네임 스페이스를 선언하면 네임스페이스마다
이름 공간이 구분돼 있으므로 서러의 이름 공간에 접근하려면 모듈을 export로 선언해야 한다. 

2. 네임스페이스 하나를 여러 파일에 선언하기
- 프로젝트 규모가 커지면 파일 단위로 모듈을 분할해야 한다. 이 때 네임스페이스를 이용하면 여러파일에 걸쳐 하나의 네임스페이스의 이름 공간을 공유할 수 있다. 
"타입 스크립트는 네임스페이스를 이용해 논리적 그룹화를 제공한다."
(논리적 그룹화는 네임스페이스의 이름만 같다면 컴파일 시에 하나의 논리적 영역으로 묶어 컴파일 할 수 있게 한다.)



