prologue)  비동기 처리와 관련해 프로미스, RsJS에 대해 알아보고 Async/Await를 이용해 비동기 동작을 동기화하는 방법에 대해 학습한다
 
📌 비동기 처리

💡 프로미스를 이용한 제어 흐름 개언. 
HTTP 요청은 비동기이므로 콜백헬과 같은 중첩 스코프를 만들어 낸다.
타입스크립트는 es6에서 제안된 프로미스를 이용해 콜백 헬이 되지 않도록 제어 흐름을 선언할 수 있다.


    👏 비동기 호출 시 중첩 스코프의 문제 
    - JS는 비동기 요청 후 응답 결과를 콜백 함수로 처리한다. 이렇게 콜백 함수로 처리하는 상황은 대체로 응답 시점을 예측할 수 없을 때 이다.
    (이와 같은 상황의 예로 HTTP 요청에 대한 응답 처리나 파일 I/O 작업 등이 있다. 비동기 요청 후 응답 결과는 콜백 함수의 매개변수를 통해 전달한다.)



    $.get( "ajax/test.html", function( data )){}
        // 응답 결과에 따라 어떤 로직을 수행함
        if(data.grade == 'admin'){}
            // 로직처리
        }
    });

    -> 콜백 함수를 처리할 때 사용하는 제어문들은 스코프를 더욱 깊에 만다는 요인이 된다. 
    ( 위 스코프의 깊이가 2정도로 가독성이 나쁘지 않지만, 스코프의 깊이가 3 이상이 되면 가독성이 서서히 나빠지기 시작한다.)


    👏 프로미스란?
    : 프로미스(promise)는 중첩 스코프 문제를 해결하기 위해 ES6에서 제한된 객체이다.
    ( 프로미스는 스코프가 깊어지지 않도록 나열식 패턴 방식으로 입력 데이터를 처리할 수 있게 한다.)

    - 프로미스 3가지 상태
    1) 대기(pending) 상태 - 프로미스가 실행되고 값이 결정되지 않은 상태를 말한다. ()
    2) 충족(fulfilled) 상태 - 대기 상태가 끝난 뒤 값이 결정된 상태이며 resolve 함수를 통해 값을 전달한다.
    3) 거부(rejected) 상태 - 프로미스가 제대로 처리 되지 않고 거부된 사태로 catch 메서드를 통해 예외를 처리한다.




🔧 tsc hello.ts --lib ES2015.Promise,dom, es5    // ES5 + 프로미스 조합
🔧 tsc promise-asyn.ts --target es6              // target을 ES6로 맞춰서 컴파일 해야 한다.






💡RxJS 를 활용한 데이터 스트림 처리.
1) 반응형 프로그래밍
: 반응형 프로그래밍 모델은 웹 페이지에 들어오는 스트림(Stream) 형태의 입력 이벤트를 감지해 반응(responsive)을 처리할 수 있는 모델이다.
( 이와 관련한 예로 검색어 제안(keyword suggestion) 기능이 있다.) / 검색어 제안 기능은 사용자가 어떠한 단어를 입력하면 단어에 연관된 관련 키워드를 보이는 기능이다.
[ 검색어 제안 기능은 사용자가 입력한 키값이 데이터 스트림(data stream) 형태로 서버에 전달되고 처리 결과를 받아 추천 키워드 목록으로 응답해 준다.]


2) 발행 구독 패턴
: 시스템은 기본적으로 사용자의 입력에 대해 반응하고 적절한 처리를 해 줄 수 있어야 한다. 이벤트는 특정 시간에 발행하지 않고 사용자가 의도한 시점에 발생한다.
(반응형 프로그래밍은 입력 이벤트를 감지하고 처리하는데 발행 구독 패턴을 이용한다.)
[ 옵저버는 옵저버블을 관측하고, 옵저버블은 상태가 변경됐을 때 옵저버에게 상태가 변경됐음을 통지해 준다.]


    👏RxJS란?
     : RxJS 반응형 프로그래밍 모델을 구현해 놓은 자바스크립트 기반 라이브러리로 데이터 흐름을 처리하는데 도움을 준다.

     👏RsJS와 Promise 차이?
     : then 메서드를 이용해 처리 흐름에 중점을 뒀던 프로미스와 달리, RxJS는 데이터 스트림에 대한 연산을 연산자(operator) 메서드를 이용해 연쇄적으로 처리할 수 있게 관련 인터페이스를 제공한다.

🔧 npm install @reactivex/rxjs@5.5.6 --save-dev     //RxJS는 라이브러리이므로 별도로 설치해야 한다. 


3) 데이터 스트림 연산자에 대한 이해
: 데이터 스트림은 시퀀스 값(1,2,3,4,5...)과 같이 연속된 데이터를 말한다.
(RsJS에서는 사용자가 키를 입력할 때마다 데이터가 생성되고 생성된 데이터는 연산자에 의해 데이터가 처리되고 나서 구독될지 말지를 결정한다.)

        RxJS에서 Stream 데이터를 처리하기 위한 3단계
        1) 스트림 데이터가 생성됨  -->  ob$ = Rx.Observable.from(...)
        2) 스트림 데이터를 연산자로 처리함 --> ob$ = ob$.map(...)
        3) 처리된 스트림 데이터를 구독함 --> Ob2$.subscribe()



4) RxJS 연산자를 활용한 데이터 스트림 처리 
[생성 연산자]
-> RxJS는 데이터 스트림을 생성해 주기 위해 생성 연산자를 제공한다. 생성 연산자는 이벤트나 값을 시퀀스(sequences) 형태로 생성해준다.

    1> 대표 생성 연산자
    create - 옵저버블을 생성한 뒤 구독 함수를 호출할 수 있다. 
    from - 배열 시퀀스를 입력으로 받아 옵저버버블을 생성한다.
    of - 시퀀스 값들을 구독 함수로 전달.

    2> 변형 연산자 - 데이터 스트림을 입력받아 형태를 가공한다.
    map 연산자는 데이터를 입력받아 어떠한 처리를 통해 입력을 변형해 처리한다.

    3> 콤비네이션 연산자 - join하는 것과 같은 옵저버블 간의 연결처리를 수행.
    concat이 대표적임. 

    4> 조건 연산자 - 데이터 스트림이 조건에 부합하는지 검사한다.
    every가 대표전 - 전체 데이터 스트림이 조건에 맞는지를 검사해 true/flase 값을 검사함
    
    5> 필터 연산자
    take가 대표적 - 데이터 스트림을 조사해 조건에 부합하는 값만을 구독 함수로 전달해 준다. 




5) 동시성을 활용한 비동기 호출 제어
: 동시성이란 멀티 스레드와 같이 여러 개의 단위 작업이 동시에 실행되는 성질을 말한다. 
 - 비동기 프로그래밍 모델. 
 - 멀티 스레드 프로그래밍.

 비동기 프로그래밍의 대표적인 모델은 http가 있다. 
 (특징은 : 단위 작업을 하나의 스레드 내에서 번갈아 가며 실행한다.)

    "자바스크립트는 멀티 스레딩을 지원하지 않는데 지원하지 않는 이유는 싱글 스레드만을 실행해야 페이지를 로딩할 때보다 더 빠른 속도로 실행할 수 있기 때문이다."
    그러나 이보다는 더 근본적인 이유로는 브라우저의 인터프리터가 단일 스레드여서 멀티 스레드를 지원하지 않기 떄문이다.
    ( setTimeout는 멀티 스레드 같지만 사실 싱글 스레드이다.)


  

6) Async /Await 소개와 설정.  ( 타입스크립트 1.7에서 추가되었다. )


    👏 Async/Await 를 이용한 동기화
    비동기 호출코드 : 응답시간이 저마다 다를 수 있으므로 차례대로 실행되지 않고 호출 시간과 응답 시간을 고려해 동작 수행. 

    👏 비동기 호출을 동기화
    비동기 호출이 이뤄지면 보통 응답 시점을 무시하고 작업이 응답되기 전에 다음 작업을 진행하므로 코드의 실행 시간은 짧다.




