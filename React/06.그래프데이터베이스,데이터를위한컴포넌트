📌그래프데이터베이스
: 고객 배열 목록에서 특정 아이디로 자료를 검색하고 수정하는 작업을 한다면? db가 필요하다.
(js 내부에는 db시스템이 없다. 이런 경우 도입하기 좋은게 그래프 db이다.)
[그래프db는 JSON과 같은 형태모 배우기 쉽고 사용도 쉽다.]

* 간단한 데이터를 처리하기 위해 그래프 DB를 도입하는 것은 비효율적이지만 많은 양의 데이터를 처리하려면 그래프 DB도입은 훌룡한 선택이다.

📌데이터를 위한 컴포넌트
리액트의 장점은 컴포넌트의 쉽게 재구성하고 공유하기 편하다는 것이다. 만약 컴포넌트가 항상 리덕스를 끌어않고 있으면 이런 장점이 많이 흐려진다. 

❗화면 컴포넌트와 데이터 컴포넌트 구분하기
1) 화면컴포넌트는
- 컴포넌트를 화면에 출력하는데 집중한다.
- 화면 컴포넌트는 프로퍼티를 통해 데이터를 전달받기만 한다. 즉, 리덕스와 상관없다.
- 데이터의 변경은 프로퍼티로 전달받은 콜백 함수를 호출하거나 state를 사용한다.

2) 데이터 컴포넌트는
- 스토어의 데이터를 컴포넌트에 전달하거나 변경하는데 집중한다.
- react-redux 공급자의 스토어를 연결하여 데이터를 관리한다. 즉, 리덕스와 깊은 연관이 있다. 
- 스토어의 리듀서와 dispatch() 함수를 화면 컴포넌트에 프로퍼티로 전달한다.
- react-redux의 공급자를 구독하는 소비자 컴포넌트 형태를 가진다.

    ✍화면 컴포넌트는 화면에 필요한 요소만 포함되어 있으므로 리덕스와 상관 없이 사용할 수 있고, 데이터 컴포넌트는 리덕스 스토어를 포함하고 있으므로 리덕스를 고려하여 사용해야 한다.

    💡데이터 컴포넌트는 하이어오더 컴포넌트 생성 함수 connect()를 사용하여 만든다. (connect() 함수는 하이어오더 컴포넌트 생성 함수이므로 화면 컴포넌트를 재활용할 수 있다.)
    