📌변수 선언과 기본 타입
: 타입은 타입스크립트가 JS가 구분되는 중요한 특징으로 변수에 나입을 추가하면 타입 안전성이 생긴다.


💡 변수선언 ('let'  vs  'var'   vs 'const')
: js 에서는 var 선언자를 이용해서 변수를 선언했다. 
(var 선언자에는 특이한 특성이 있는데, 선언된 변수가 호이스팅 된다는 것이다.)
호이스팅이란 끌어올림이라는 의미로 변수가 선언된 위치와 관계없이 스코프(scope)의 최상위로 끌어올림 되어 같은 스코프라면 어디서든 호출된다.
(이러한 특성을 방지하기 위해 let 선언자가 나왔다.)

 * 변수가 블록 내에서만 유효범위를 갖게 하려면 블록 레벨 스코프를 지원해야 한다. 
 

👇블록레벨 스코프를 지원하는 대표적인 선언은 다음과 같다. 
1. let, const. 
2. 클래스, 인터페이스, 타입 에일리어스 , enum


💡let 선언자 특징. 
블록 레벨 스코프를 지원하는 방법으로 ES6에서는 let 선언자가 나왔다. 
    특징. 
    - 같은 블록 내에서 같은 이름 변수를 중복해서 선언 x
    - 변수를 초기화하기 전에 변수에 접근할 수 없게 해서 호이스팅 방지. 
    - 선언할 변수에 블록 레벨 스코프를 적용. 


💡const (상수 선언)
const는 ES6의 특징이며 타입스크립트에서도 지원되는 특징으로 블록 레벨 스코프를지원하며 호이스팅을 일으키지 않는다. 
(let 선언자와는 다른 점은 const는 변수를 상수로 선언할 때 사용한다는 점이다.)
- const를 이용해 변수를 상수로 선언하면 선언할 때 초기화는 가능하지만 재할당되지 않는 읽기 전용 변수가 된다.

"const로 선언한 변수라도 예외적으로 객체 리터럴의 속성으로 변경할 수 있다"
why? 재할당하는 것은 허용하지 않지만, 속성값의 변경을 허용하는 특징이 있다.



📌타입검사와 타입 선언
📝점진적 타입 검사 (파이썬도 점진적 타입 검사)
: 타입스크립트는 점진적 타입검사를 수행한다. 
( 컴파일 시간에 타입 검사를 수행하면 필요에 따라 타입 선언의 생략을 허용한다.)

📝기본타입
1)타입스크립트에서 지원하는 기본 타입의 종류
2)string, number, booloean
3)symbol
4)enum
5)문자리터럴


📝객체 타입
1) Array
2) Tuple
3) Function
4) 생성자
5) Class
6) Interface


📝기타 타입
1) 유니언
2) 인터섹션 : 두 타입을 합쳐 하나로 만들 수 있는 타입
3) 특수 타입 :  void, null, undefined



🚩자바스크립트 타입과 비교했을 때 타입스크립트에는 다음과 같은 타입이 추가되었다.
- 객체 타입의 타입으로 any 추가. 
- any 타입의 특수 타입으로 유니언 타입과 인터섹션 추가되었다
- 객체(object) 타입의 하위 타입으로 Array, interface, Tuple 추가되었다
- void 타입 추가. 


"자바스킙트에서는 타입을 지정할 때 런타임 시 값 할당과 동시에 동적으로 타입이 결정되도록 느슨한 타입(loosely typed) 체계를 사용한다. 
반면에 타입스크립트에서는 저장된 타입 값만 핟랑받도록 엄격한 타입(strong typed) 체계를 사용한다. 




📌타입스크립트의 내장 타입
💡any 타입
: 제약이 없는 타입으로 어떤 타입의 값도 받아들일 수 있다. 자바스크립트가 최소한 정적 타입 검사(static type checking)를 수해앟는 것처럼 최소한의 타입 검사만 수행. 
(연산 결과를 예측할 수 없을 때 사용한다.) +) 배열 타입으로 사용하면 어떠한 요소도 받을 수 있다. 
- 모든 타입의 가장 최상위 타입임. 


* null과 undefined는 둘다 구체적인 값이 없다는 것이다.



