프로퍼티 : 상위 컴포넌트에서 하위 컴포넌트로 전달되는 읽기 전용 데이터이다.
        (자바스크립트의 자료형을 모두 사용할 수 있다. 이 때 프로퍼티의 자료형은 미리 선언해주는 것이 좋다.)

state : 컴포넌트의 상태를 저장하고 변경할 수 있는 데이터 이다.

컨텍스트 : 부모 컴포넌트에 생성하여 모든 자식 컴포넌트에 전달하는 데이터 이다.


------------------------------------------
■컴포넌트의 생명주기
 - 컴포넌트의 생성부터 소멸까지의 과정을 컴포넌트의 생명주기라고 부른다.



 -----------------------------------------

 ■ 클래스형 컴포넌트
  - 클래스형 컴포넌트는 두 종류의 클래스를 사용하는데 여기서는 이 두 클래스의 차이점과 장단점을 알아보자.

  - "Component 클래스"는 프로퍼티, state와 생명주기 함수가 들어있는 구조의 컴포넌트를 만들 때 사용한다. 
  
  - "PureComponent 클래스"는 Component 클래스를 상속받은 클래스이다. PureComponent 클래스는 shouldComponentUpdate() 함수를 얕은 비교를 하도록 재정의 했다.
  (즉, Pure 컴포넌트는 '얕은 비교를 통해 데이터가 변경된 경우'에만 render()함수를 호출한다. 반면 Component 클래스로 만들어진 컴포넌트는 항상 render()함수를 호출한다.)


  PureComponent 클래스로 선언한 컴포넌트에서는 shouldComponentUpdate() 함수에서 shallowEqual() 함수로 얕은 비교를 하여 데이터의 변경이 있으면 화면을 새로 출력하고, 
  Component 클래스로 선언한 컴포넌트는 이러한 비교 과정 없이 항상 새로 출력한다.


  "PureComponent와 불변 변수로 성능을 높인다."
- Component 대신 얕은 비교를 사용하는 PureComponent로 컴포넌트를 만들어 리액트의 성능을 높인다.
- 이 때 앱의 성능을 최대화하기 위해 불변 변수도 사용한다.

- 예를 들어 에어비앤비는 1000개가 넘는 숙소 정보를 화면에 출력한다. 그런데 한 곳의 숙소 예약이 가득차게 되어 1개의 정보만 바뀔 수도 있다. 1개의 숙소 정보가 바뀔 때마다 
999개의 숙소 정보를 비교하면 비효율적이다. 이런 경우에는 불변 변수를 활용해 숙소 정보가 바뀔 때마다 새 배열을 할당하는 방식으로 비교 속도를 최적화할 수 있다. 

---------------------------------------------

■ 함수형 컴포넌트
 - 함수형 컴포넌트는 조금 길게 표현하여 state가 없는 함수형 컴포넌트라고 부른다. 이를 줄여 SFC라고 부른다. 
 - 함수형 컴포넌트는 함수와 동일한 구조를 갖는다.

 --------------------------------------------
 ■ 배열 컴포넌트
 - 배열 컴포넌트에는 키값을 key로 꼭 정의해주어야 한다.
(키값을 정의하여 출력한 배열 컴포넌트는 다시 출력해야 하는 경우 리액트 엔진이 기존의 컴포넌트를 재활용하여 성능을 높일 수 있다.)


 - render() 함수는 트리 구조의 노드를 반환한다. 그런데 리액트는 트리 구조의 노드 외에도 배열 구조의 노드를 반환할 수도 있다. 


---------------------------------------------
■ 컴포넌트에서 콜백 함수와 이벤트 처리하기
- 앞에서 프로퍼티를 사용하면 상위 커포넌트의 데이터를 하위 컴포넌트에 전달할 수 있다는 것을 배웠다.
- 만약 하위 컴포넌트에서 프로퍼티를 변경해야 할 때는 어떻게 해야할까?
- 프로퍼티 원본을 수정할 수 있는 함수를 하위 컴포넌트에 제공하면 된다. 콜백 함수란 정의된 위치에 실행되지 않고, 이후 특정 상황에서 실행되는 함수이다.





** 단반향 흐름 방식 개념 정리
- 리액트는 프로퍼티, state와 같은 데이터를 상위 컴포넌트에서 하위 컴포넌트 방향으로 전달한다. 만약 데이터 변경이 필요한 경우 콜백 함수를 호출하여 원본 데이터가 위치한 상위
컴포넌트에서 데이터를 변경하고 다시 자식 컴포넌트로 전달하도록 만든다. 
( 단방향 흐름 방식은 원본 데이터의 무결성을 지켜주므로 데이터 수정으로 인한 데이터 파편화를 줄여준다.)