📌 고급 타입
: 기본 타입을 바타으로 새로운 타입을 정의한다.


📝 유니언 타입
( 타입스크립트 1.4에 추가된 특징이다.) - 유니언 타입은 2개 이상의 타입을 하나의 타입으로 정의한 타입이다.


💡 타입 가드
: 유니언 타입은 여러 타입을 받을 수 있다는 장점이 있다. 그런데 유니언 타입은 여러 타입을 받음으로써 타입을 확신할 수 없다는 문제가 있다. 
(따라서 매개변수가 유니언 타입일 때 안전한 값을 할당하려면 타입 검사를 거쳐 매개변수 값을 받아야 한다.)
" 이 처럼 유니언 타입에 대한 타입 검사를 통해 타입 안전성을 주는 방법을 '타입 가드(type guards)'라 한다.
- 타입 가드는 문법적인 특징이라기보다 유니언 타입에 속한 특정 타입인지 검사해 타입 안전성을 확보하는 방법이다."
- 타입 가드는 유니언 타입으로 지정된 변수에 대해 typeof 나 instanceof 연산자를 활용해 타입 질의를 한 후 명시된 타입과 일치하는지 검사한다.

    👏typeof (indexOf) : indexOf는 매개변수가 string 타입이어야 한다.
    👏instanceof : 클래스 타입을 확인한다.




💡 알아두면 쓸모 있는 고급 타입들
✔ 문자열 리터럴 타입
: 문자열 리터럴 타입은 타입에 정의한 문자열만 할당받을 수 있게 하는 타입이다. 
(문자열 리터럴 타입은 사용자 정의 타입이므로 사용자가 정의해 사용한다.)

✔ 룩업(lookup) 타입
: 타입 스크립트 2.1에 추가된 타입이다. 인덱스 접근 타입으로 불린다.
(why? keyof를 통해 타입 T의 하위 타입을 생성해 내기 때문이다. 여기서 타입 T는 여러 타입으로 이뤄진 유니언이나 인터페이스 타입을 가르킨다.)

✔non-nullable 타입
: 타입스크립트 2.0에 추가된 특징으로 non-nullable 타입이 있다. non-nullable 타입은 컴파일러가 null이나 undefined를 엄격하게 제한한다.
( 타입스크립트 2.0전에는 null이나 undefined를 모든 타입의 변수에 할당할 수 있었다. ex) string타입으로 선언된 변수에 null 이나 undefined를 할당할 수 있었다.)
ex) number 타입이면 숫자 값만 할당할 수 있어야 하는데 null과 undefined도 할당할 수 있으므로 타입이 명확하지 않다. 그래서 타입스크립트 2.0에서는 이를 명확히 하려고
strictNullCheck라는 옵션이 추가되었다.)

        " null/undefined 를 허용하지 않는 non-nullable 타입을 적용하려면 먼저 tsconfig.json 설정파일에서 엄격한 null 검사 (strictNullChecks) 옵션을 true로 설정한다."


✔ 네버타입
: 타입스크립트 2.0에 내장 타입으로 네버(never) 타입이 추가됬다. 네버는 모든 타입의 하위 타입으로 사용할 수 있지만, any 타입을 never 타입에 할당할 수는 없다. 
    ❗다음과 같은 2가지 상황에 사용.
    1) 함수에 닿을 수 없는 코드 
    2) 함수에 Throw 객체가 반환돼 오류가 발생할 떄.

    ❗닿을 수 없다는 것에 대표적인 예는 무한 루프가 있다. 함수에 무한 루프가 있으면 무한 루프 이후의 코드는 절대 실행되지 않는다. 
    ( 따라서 닿을 수 없는 코드가 되며 never 타입이 된다. )


✔ this 타입
: this 타입은 인터페이스와 클래스의 하위 타입이면서 이들을 참조할 수도 있는 타입이다.
(this 타입을 다형적 타입이라고도 하는데, 선언 위치에 따라 참조하는 대상이 달라지기 때문이다. 
클래스 멤버 변수나 생성자에서 this 타입을 사용하면 가장 가까운 클래스의 인스턴스를 참조한다.)

    ❗ 자기 자신을 반환하는 인스턴스 메서드를 활용해 체이닝 형태로 선언하면 마치 데이터가 흐르는 듯이 표현할 수 있는데 이러한 
    패턴을 플루언트 패턴이라 하고 줄여서 플루언트 패턴이라 한다."